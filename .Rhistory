plt.show()
h = song_filter
x = low_data
song_filtered =  np.convolve(low_data, song_filter)
song_filtered = raverse(np.convolve(raverse(np.convolve(h, x)), h))
fig, ax = plt.subplots()
ax.plot(low_data, label = "Raw")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song Firls")
ax.legend()
fig.show()
plt.show()
h = song_filter
x = low_data
song_filtered =  np.convolve(low_data, song_filter)
song_filtered = raverse(np.convolve(raverse(np.convolve(h, x)), h))[len(h) - 1:-len(h) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Raw")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song Firls")
ax.legend()
fig.show()
plt.show()
h = song_filter
x = low_data
song_filtered =  np.convolve(low_data, song_filter)
song_filtered = reverse(np.convolve(reverse(np.convolve(h, x)), h))
fig, ax = plt.subplots()
ax.plot(low_data, label = "Raw")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song Firls")
ax.legend()
fig.show()
plt.show()
h = song_filter
x = low_data
song_filtered =  np.convolve(low_data, song_filter)
song_filtered = reverse(np.convolve(reverse(np.convolve(h, x)), h))[len(h) - 1:-len(h) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Raw")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song Firls")
ax.legend()
fig.show()
plt.show()
song_sfreq = 50
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
freq = [0, cutoff - 0.1, cutoff + 0.1, song_sfreq*2]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
song_sfreq = 50
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
freq = [0, cutoff - 0.1, cutoff + 0.1, 2*song_sfreq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
song_sfreq = 50
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
freq = [0, cutoff - 0.1, cutoff + 0.1, 2*song_sfreq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=False)
song_sfreq = 60
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
freq = [0, cutoff - 0.1, cutoff + 0.1, 2*song_sfreq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=False)
song_sfreq = 60
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=False)
song_sfreq = 60
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=False)
song_sfreq = 50
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=False)
song_sfreq = 50
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=False)
plt.show()
song_sfreq = 50
cutoff = 2.0
flim = (.01, sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
# song_filter = signal.firwin2(song_order, freq, gain, fs = sfreq)
song_filter = signal.firls(song_order, freq, gain, fs=sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plt.show()
moving_avg = lambda x, k:np.convolve(x, np.ones(k)/k, mode = "same")
reverse = lambda x: x[::-1]
low_sfreq = 60.
high_sfreq = 120.
song_order = 11.
nyq = song_sfreq / 2.0 # Nyquist freq
flim = (.01, song_sfreq / 2.)  # limits for plotting
cutoff = 2.0
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
main_dir = join(os.path.expanduser("~"), "Projects", "Behavioral-oscillations",
"data")
low_data_dir = join(main_dir, "low_resolution")
high_data_dir = join(main_dir, "high_resolution")
# import data
low_part = random.choice(os.listdir(low_data_dir))
high_part = random.choice(os.listdir(high_data_dir))
low_data = pd.read_csv(join(low_data_dir, low_part))
high_data = pd.read_csv(join(high_data_dir, high_part))
low_data = low_data.groupby('CSI').mean().Corr.to_list()
high_data = high_data.groupby('CSI').mean().Corr.to_list()
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
flim=flim, compensate=True)
plt.show()
song_sfreq = 50
cutoff = 2.0
flim = (.01, song_sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
song_filter = signal.firls(song_order, freq, gain, fs=song_sfreq)
song_filter_eff = np.convolve(song_filter, song_filter[::-1])
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plt.show()
plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
flim=flim, compensate=True)
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, song_filter[::-1])
plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
flim=flim, compensate=True)
plt.show()
reverse(song_filter) == song_filter[::-1]
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
print(song_filter_eff)
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
flim=flim, compensate=True)
plt.show()
song_sfreq = 50
cutoff = 2.0
flim = (.01, song_sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
song_filter = signal.firls(song_order, freq, gain, fs=song_sfreq)
song_filter_eff = np.convolve(song_filter, song_filter[::-1])
print(song_filter_eff)
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plt.show()
song_sfreq = 50
cutoff = 2.0
flim = (.01, song_sfreq / 2.)  # limits for plotting
nyq = song_sfreq/2.0 # Nyquist freq
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_order = 11
song_filter = signal.firls(song_order, freq, gain, fs=song_sfreq)
song_filter_eff = np.convolve(song_filter, song_filter[::-1])
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plt.show()
moving_avg = lambda x, k:np.convolve(x, np.ones(k)/k, mode = "same")
reverse = lambda x: x[::-1]
low_sfreq = 60.
high_sfreq = 120.
song_order = 11.
nyq = low_sfreq / 2.0 # Nyquist freq
flim = (.01, low_sfreq / 2.)  # limits for plotting
cutoff = 2.0
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
print(song_filter_eff)
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
flim=flim, compensate=True)
plt.show()
moving_avg = lambda x, k:np.convolve(x, np.ones(k)/k, mode = "same")
reverse = lambda x: x[::-1]
low_sfreq = 60.
high_sfreq = 120.
song_order = 11.
nyq = low_sfreq / 2.0 # Nyquist freq
flim = (.01, low_sfreq / 2.)  # limits for plotting
cutoff = 2.0
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
main_dir = join(os.path.expanduser("~"), "Projects", "Behavioral-oscillations",
"data")
low_data_dir = join(main_dir, "low_resolution")
high_data_dir = join(main_dir, "high_resolution")
# import data
low_part = random.choice(os.listdir(low_data_dir))
high_part = random.choice(os.listdir(high_data_dir))
low_data = pd.read_csv(join(low_data_dir, low_part))
high_data = pd.read_csv(join(high_data_dir, high_part))
low_data = low_data.groupby('CSI').mean().Corr.to_list()
high_data = high_data.groupby('CSI').mean().Corr.to_list()
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
print(song_filter_eff)
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
flim=flim, compensate=True)
plt.show()
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
print(song_filter_eff)
plot_filter(song_filter_eff, song_sfreq, freq, gain, title = "FIR-LS from Song",
flim=flim, compensate=True)
# plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
#             flim=flim, compensate=True)
# plt.show()
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
print(song_filter_eff)
# plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
#             flim=flim, compensate=True)
# plt.show()
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
# song_filter_eff = np.convolve(song_filter, reverse(song_filter))
print(song_filter_eff)
# plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
#             flim=flim, compensate=True)
# plt.show()
song_filter = signal.firls(song_order, low_sfreq, gain, fs=low_sfreq)
# song_filter_eff = np.convolve(song_filter, reverse(song_filter))
# print(song_filter_eff)
# plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
#             flim=flim, compensate=True)
# plt.show()
song_filter = signal.firls(song_order, freq, gain, fs=low_sfreq)
# song_filter_eff = np.convolve(song_filter, reverse(song_filter))
# print(song_filter_eff)
# plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
#             flim=flim, compensate=True)
# plt.show()
song_filter = signal.firls(song_order, freq, gain, fs=low_sfreq)
song_filter_eff = np.convolve(song_filter, reverse(song_filter))
# print(song_filter_eff)
# plot_filter(song_filter_eff, low_sfreq, freq, gain, title = f"FIR-LS from Song {low_sfreq} Hz",
#             flim=flim, compensate=True)
# plt.show()
plot_filter(np.ones(song_order)/song_order, low_sfreq, freq, gain,
title = f"Moving avg. Ord:{song_order}", flim=flim, compensate=False)
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.legend()
ax.title("Kształt danych po przefiltrowaniu Mov-avg i FIR-ls jest podobny")
fig.show()
plt.show()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.legend()
ax.set_title("Kształt danych po przefiltrowaniu Mov-avg i FIR-ls jest podobny")
fig.show()
plt.show()
song_filter
song_order
moving_avg = lambda x, k: np.convolve(x, np.ones(k)/k, mode = "same")
reverse = lambda x: x[::-1]
low_sfreq = 60
high_sfreq = 120
song_order = 11
nyq = low_sfreq / 2.0 # Nyquist freq
flim = (.01, low_sfreq / 2.)  # limits for plotting
cutoff = 2.0
freq = [0, cutoff - 0.1, cutoff + 0.1, nyq]
gain = [1, 1, 0, 0]
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.legend()
ax.set_title("Kształt danych po przefiltrowaniu Mov-avg i FIR-ls jest podobny")
fig.show()
plt.show()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.legend()
ax.set_title("Efekty filtrowania pomiędzy moving-avg a song drastycznie się różnią")
fig.show()
plt.show()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.set_xlabel('Smarts')
ax.set_ylabel('Probability')
ax.legend()
ax.set_title("Efekty filtrowania pomiędzy moving-avg a song drastycznie się różnią")
fig.show()
plt.show()
low_data.groupby('CSI').mean().Corr
main_dir = join(os.path.expanduser("~"), "Projects", "Behavioral-oscillations",
"data")
low_data_dir = join(main_dir, "low_resolution")
high_data_dir = join(main_dir, "high_resolution")
# import data
low_part = random.choice(os.listdir(low_data_dir))
high_part = random.choice(os.listdir(high_data_dir))
low_data = pd.read_csv(join(low_data_dir, low_part))
high_data = pd.read_csv(join(high_data_dir, high_part))
print(low_data.groupby('CSI').mean().Corr)
low_data = low_data.groupby('CSI').mean().Corr.to_list()
high_data = high_data.groupby('CSI').mean().Corr.to_list()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.set_xlabel('CSI')
ax.set_ylabel('Acc [0-100%]')
ax.legend()
ax.set_title("Efekty filtrowania pomiędzy moving-avg a song drastycznie się różnią")
ax.set_xticks([0, 11, 20, 29, 41], [216, 400, 550, 900])
fig.show()
plt.show()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.set_xlabel('CSI')
ax.set_ylabel('Acc [0-100%]')
ax.legend()
ax.set_title("Efekty filtrowania pomiędzy moving-avg a song drastycznie się różnią")
ax.set_xticks([0, 11, 20, 29, 41], [216, 400, 550, 700, 900])
fig.show()
plt.show()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.set_xlabel('CSI')
ax.set_ylabel('Acc [0-100%]')
ax.legend()
ax.set_title("Efekty filtrowania pomiędzy moving-avg a song drastycznie się różnią")
ax.set_xticks([0, 11, 20, 29, 41], [200, 400, 550, 700, 900])
fig.show()
plt.show()
# forward-backward filtering
song_filtered = reverse(np.convolve(reverse(np.convolve(song_filter, low_data)), song_filter))
# abbrivied part of signal removed
song_filtered = song_filtered[len(song_filter) - 1:-len(song_filter) - 1]
fig, ax = plt.subplots()
ax.plot(low_data, label = "Original")
ax.plot(moving_avg(low_data, song_order), label = f"Moving avg. Ord:{song_order}")
ax.plot(song_filtered, label = f"Song FIR-LS")
ax.set_xlabel('CSI [ms]')
ax.set_ylabel('Acc [0-100%]')
ax.legend()
ax.set_title("Efekty filtrowania pomiędzy moving-avg a song drastycznie się różnią")
ax.set_xticks([0, 11, 20, 29, 41], [200, 400, 550, 700, 900])
fig.show()
plt.show()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ggplot2::theme_set(ggplot2::theme_minimal())
library(tidyverse)
library(WaveletComp)
# load data
low_data_dir <- "../../data/low_resolution"
high_data_dir <- "../../data/high_resolution"
low_files <- dir(low_data_dir, patter = "*.csv$")
high_files <- dir(high_data_dir, patter = "*.csv$")
low_data <- low_files %>%
map(~ read_csv(file.path(low_data_dir, .), show_col_types = F)) %>%
reduce(rbind)
high_data <- high_files %>%
map(~ read_csv(file.path(high_data_dir, .), show_col_types = F)) |>
reduce(rbind)
# high res data gathered in 4 sessions encoded PARTID + S1-S4. S1-S4 removed
high_data <- high_data |>
mutate(PART_ID = str_sub(PART_ID, 1, nchar(PART_ID)-2))
high_data
high_data %>%
group_by(PART_ID, CSI) %>%
summarise(mean = mean(Corr))
high_data %>%
group_by(CSI) %>%
summarise(mean = mean(Corr))
high_data %>%
group_by(PART_ID, CSI) %>%
summarise(mean = mean(Corr)) %>%
ggplot(mapping = aes(x = CSI, y = mean)) +
geom_line() +
facet_wrap(~PART_ID)
high_data %>%
group_by(CSI) %>%
summarise(mean = mean(Corr)) %>%
ggplot(mapping = aes(x = CSI, y = mean)) +
geom_line() +
facet_wrap(~PART_ID)
high_data %>%
group_by(CSI) %>%
summarise(mean = mean(Corr)) %>%
ggplot(mapping = aes(x = CSI, y = mean)) +
geom_line()
high_data %>%
group_by(PART_ID, CSI) %>%
summarise(mean = mean(Corr)) %>%
ggplot(mapping = aes(x = CSI, y = mean)) +
geom_line() +
facet_wrap(~PART_ID)
